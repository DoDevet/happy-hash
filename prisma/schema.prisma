// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  id           Int            @id @default(autoincrement())
  phone        String?        @unique
  email        String?        @unique
  name         String
  avatar       String?
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  token        Token[]
  posts        Post[]
  comments     Comment[]
  shortcutTags shortcutTag[]
  Like         Like[]
  user         Notification[]
}

model Token {
  id        Int      @id @default(autoincrement())
  token     String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Post {
  id        Int       @id @default(autoincrement())
  views     Int       @default(0)
  title     String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes     Like[]
  comments  Comment[]
  userId    Int
  payload   String    @db.LongText
  image     String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  hashtag   hashtag?  @relation(fields: [hashtagId], references: [id], onDelete: Cascade)
  hashtagId Int?

  @@index([userId])
  @@index([hashtagId])
}

model Comment {
  id      Int    @id @default(autoincrement())
  post    Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  message String
  postId  Int
  userId  Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([postId])
  @@index([userId])
}

model hashtag {
  id          Int           @id @default(autoincrement())
  name        String        @unique
  posts       Post[]
  shortcutTag shortcutTag[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model shortcutTag {
  id         Int       @id @default(autoincrement())
  name       String
  customName String?
  user       User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  hashtags   hashtag[]
  userId     Int
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt

  @@index([userId])
}

model Like {
  id Int @id @default(autoincrement())

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId Int
  postId Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([postId])
}

model Notification {
  id Int @id @default(autoincrement())

  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int?

  @@index([userId])
}
